<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MALIQ - Admin Panel</title>
    <style>
        :root {
            --bg: #0f1724;
            --card: #0b1220;
            --accent: #06b6d4;
            --muted: #94a3b8;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --admin: #ff6b6b;
            color-scheme: dark;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        }
        
        body {
            background: var(--bg);
            color: white;
            padding: 20px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        h1 {
            background: linear-gradient(135deg, var(--accent), #7c3aed);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 24px;
        }
        
        .logout-btn {
            background: var(--danger);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: var(--card);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255,255,255,0.1);
            text-align: center;
            transition: transform 0.2s;
        }
        
        .stat-card:hover {
            transform: translateY(-2px);
        }
        
        .stat-number {
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: var(--muted);
            font-size: 14px;
        }
        
        .admin-section {
            background: var(--card);
            padding: 25px;
            border-radius: 10px;
            border: 1px solid rgba(255,255,255,0.1);
            margin-bottom: 20px;
        }
        
        .section-title {
            font-size: 20px;
            margin-bottom: 20px;
            color: var(--accent);
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            color: var(--muted);
            font-weight: 500;
        }
        
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px;
            background: rgba(255,255,255,0.08);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 6px;
            color: white;
            font-size: 14px;
        }
        
        .form-group textarea {
            min-height: 120px;
            resize: vertical;
            font-family: inherit;
        }
        
        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            border-color: var(--accent);
            outline: none;
        }
        
        .material-list {
            max-height: 300px;
            overflow-y: auto;
            margin-bottom: 15px;
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 6px;
            padding: 10px;
        }
        
        .material-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            background: rgba(255,255,255,0.05);
            border-radius: 6px;
            margin-bottom: 8px;
        }
        
        .btn {
            background: var(--accent);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s;
        }
        
        .btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }
        
        .btn-danger {
            background: var(--danger);
        }
        
        .btn-success {
            background: var(--success);
        }
        
        .btn-warning {
            background: var(--warning);
        }
        
        .users-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .user-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: rgba(255,255,255,0.05);
            border-radius: 6px;
            margin-bottom: 10px;
        }
        
        .quick-recipe-input {
            background: rgba(255,255,255,0.05) !important;
            border: 1px solid rgba(255,255,255,0.2) !important;
            font-family: 'Courier New', monospace !important;
            font-size: 13px !important;
            line-height: 1.5 !important;
        }
        
        .preview-area {
            background: rgba(255,255,255,0.03);
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 6px;
            padding: 15px;
            margin-top: 15px;
            min-height: 100px;
        }
        
        .preview-title {
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 10px;
            color: var(--accent);
        }
        
        .preview-material {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255,255,255,0.05);
        }
        
        .preview-material:last-child {
            border-bottom: none;
        }
        
        .help-text {
            color: var(--muted);
            font-size: 12px;
            margin-top: 5px;
        }
        
        .tab-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            padding-bottom: 10px;
            flex-wrap: wrap;
        }
        
        .tab-btn {
            background: rgba(255,255,255,0.05);
            border: 1px solid rgba(255,255,255,0.1);
            color: var(--muted);
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
        }
        
        .tab-btn:hover {
            background: rgba(255,255,255,0.1);
        }
        
        .tab-btn.active {
            background: var(--accent);
            color: white;
            border-color: var(--accent);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .last-update {
            text-align: center;
            color: var(--muted);
            font-size: 12px;
            margin-top: 10px;
        }
        
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 10px;
            }
            
            .admin-section {
                padding: 15px;
            }
            
            .tab-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üß† MALIQ Admin Panel</h1>
            <button class="logout-btn" onclick="logout()">üö™ √áƒ±kƒ±≈ü Yap</button>
        </header>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalUsers">0</div>
                <div class="stat-label">Toplam Kullanƒ±cƒ±</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="activeUsers">0</div>
                <div class="stat-label">Aktif Kullanƒ±cƒ± (30 g√ºn)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalProducts">0</div>
                <div class="stat-label">Toplam √úr√ºn</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalMaterials">0</div>
                <div class="stat-label">Toplam Malzeme</div>
            </div>
        </div>

        <div class="last-update" id="lastUpdate">
            Son g√ºncelleme: Y√ºkleniyor...
        </div>

        <div class="tab-buttons">
            <button class="tab-btn active" onclick="showTab('quick')">üöÄ Kolay Tarif Ekleme</button>
            <button class="tab-btn" onclick="showTab('manual')">üìù Manuel √úr√ºn Ekleme</button>
            <button class="tab-btn" onclick="showTab('materials')">üì¶ Malzeme Y√∂netimi</button>
            <button class="tab-btn" onclick="showTab('users')">üë• Kullanƒ±cƒ± Y√∂netimi</button>
        </div>

        <!-- KOLAY TARƒ∞F EKLEME -->
        <div class="tab-content active" id="quick-tab">
            <div class="admin-section">
                <h2 class="section-title">üöÄ Kolay Tarif Ekleme</h2>
                
                <div class="form-group">
                    <label>Tarif Formatƒ±nda Yazƒ±n:</label>
                    <textarea 
                        id="quickRecipeInput" 
                        class="quick-recipe-input"
                        placeholder="√ñrnek format:

Special Burgerüçî
- Dana Kƒ±yma: 200g ü•©
- Pastƒ±rma: 40g ü•ì
- Cheddar: 50g üßÄ
- Burger Ekmeƒüi: 1 adet üçû
- Marul: 45g ü•¨
- Domates: 55g üçÖ
- Barbek√º Sos: 25g üî•
- Baharatlar: 15g üßÇ

üí° ƒ∞PUCU:
- ƒ∞lk satƒ±r: √úr√ºn adƒ± + emoji
- Sonraki satƒ±rlar: - Malzeme: miktar birim emoji
- Birimler: g, gr, kg, ml, lt, adet, dilim
- Bo≈ü satƒ±rlarƒ± atlayabilirsiniz"
                    ></textarea>
                    <div class="help-text">
                        Yukarƒ±daki formatta tarifinizi yazƒ±n, otomatik olarak parse edilecektir.
                    </div>
                </div>
                
                <div class="preview-area" id="previewArea">
                    <div class="preview-title">√ñnizleme:</div>
                    <div id="previewContent">Tarif yazmaya ba≈üladƒ±ƒüƒ±nƒ±zda √∂nizleme burada g√∂r√ºnecek...</div>
                </div>
                
                <button class="btn btn-success" onclick="parseAndAddRecipe()" style="margin-top: 15px;">
                    ‚úÖ Tarifi Ekle
                </button>
            </div>
        </div>

        <!-- MANUEL √úR√úN EKLEME -->
        <div class="tab-content" id="manual-tab">
            <div class="admin-section">
                <h2 class="section-title">üìù Manuel √úr√ºn Ekleme</h2>
                <div class="form-grid">
                    <div>
                        <div class="form-group">
                            <label>√úr√ºn Adƒ±</label>
                            <input type="text" id="productName" placeholder="Yeni √ºr√ºn adƒ±">
                        </div>
                        <div class="form-group">
                            <label>Emoji</label>
                            <input type="text" id="productEmoji" placeholder="ü•ô">
                        </div>
                        <button class="btn" onclick="addProduct()">‚ûï √úr√ºn Ekle</button>
                    </div>
                    <div>
                        <div class="form-group">
                            <label>Mevcut √úr√ºnler</label>
                            <div class="material-list" id="productList">
                                <!-- √úr√ºnler burada listelenecek -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- MALZEME Y√ñNETƒ∞Mƒ∞ -->
        <div class="tab-content" id="materials-tab">
            <div class="admin-section">
                <h2 class="section-title">üì¶ Malzeme Y√∂netimi</h2>
                <div class="form-grid">
                    <div>
                        <div class="form-group">
                            <label>Malzeme Adƒ±</label>
                            <input type="text" id="materialName" placeholder="Yeni malzeme adƒ±">
                        </div>
                        <div class="form-group">
                            <label>Emoji</label>
                            <input type="text" id="materialEmoji" placeholder="üçÖ">
                        </div>
                        <div class="form-group">
                            <label>Varsayƒ±lan Miktar</label>
                            <input type="number" id="materialQuantity" placeholder="100">
                        </div>
                        <div class="form-group">
                            <label>Birim</label>
                            <select id="materialUnit">
                                <option value="gr">gr</option>
                                <option value="ml">ml</option>
                                <option value="adet">adet</option>
                                <option value="dilim">dilim</option>
                            </select>
                        </div>
                        <button class="btn" onclick="addMaterial()">‚ûï Malzeme Ekle</button>
                    </div>
                    <div>
                        <div class="form-group">
                            <label>Mevcut Malzemeler</label>
                            <div class="material-list" id="materialList">
                                <!-- Malzemeler burada listelenecek -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- KULLANICI Y√ñNETƒ∞Mƒ∞ -->
        <div class="tab-content" id="users-tab">
            <div class="admin-section">
                <h2 class="section-title">üë• Kullanƒ±cƒ± Y√∂netimi</h2>
                <div class="users-list" id="usersList">
                    <!-- Kullanƒ±cƒ±lar burada listelenecek -->
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentTab = 'quick';
        let autoRefreshInterval;
        
        // Admin kontrol√º
        window.addEventListener('load', function() {
            console.log('Admin panel y√ºkleniyor...');
            const isAdmin = localStorage.getItem('maliq_admin');
            const userStr = localStorage.getItem('maliq_user');
            
            if (!isAdmin || !userStr) {
                console.log('Admin deƒüil, y√∂nlendiriliyor...');
                window.location.href = 'index.html';
                return;
            }
            
            try {
                const user = JSON.parse(userStr);
                if (!user.isAdmin) {
                    console.log('Admin yetkisi yok, y√∂nlendiriliyor...');
                    window.location.href = 'index.html';
                    return;
                }
            } catch (e) {
                console.log('JSON parse hatasƒ±:', e);
                window.location.href = 'index.html';
                return;
            }
            
            // Admin paneline giri≈ü yapƒ±ldƒ±
            console.log('Admin giri≈üi ba≈üarƒ±lƒ±!');
            initializeAdminPanel();
        });
        
        function initializeAdminPanel() {
            // ƒ∞lk y√ºkleme
            loadAllData();
            
            // Kolay tarif inputunu dinle
            document.getElementById('quickRecipeInput').addEventListener('input', function() {
                updatePreview();
            });
            
            // Otomatik yenileme (5 saniyede bir)
            autoRefreshInterval = setInterval(loadAllData, 5000);
            
            console.log('Admin panel ba≈ülatƒ±ldƒ±!');
        }
        
        function loadAllData() {
            loadStats();
            loadProducts();
            loadMaterials();
            loadUsers();
            updateLastUpdateTime();
        }
        
        function updateLastUpdateTime() {
            const now = new Date();
            document.getElementById('lastUpdate').textContent = 
                'Son g√ºncelleme: ' + now.toLocaleTimeString('tr-TR');
        }
        
        function showTab(tabName) {
            currentTab = tabName;
            
            // Tab butonlarƒ±nƒ± g√ºncelle
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`[onclick="showTab('${tabName}')"]`).classList.add('active');
            
            // Tab i√ßeriklerini g√ºncelle
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(`${tabName}-tab`).classList.add('active');
        }
        
        function logout() {
            if (confirm('√áƒ±kƒ±≈ü yapmak istediƒüinizden emin misiniz?')) {
                clearInterval(autoRefreshInterval);
                localStorage.removeItem('maliq_admin');
                localStorage.removeItem('maliq_user');
                window.location.href = 'index.html';
            }
        }
        
        function loadStats() {
            try {
                const users = JSON.parse(localStorage.getItem('maliq_users') || '[]');
                const products = JSON.parse(localStorage.getItem('maliq_products') || '[]');
                const materials = JSON.parse(localStorage.getItem('maliq_materials') || '[]');
                
                // Admin olmayan kullanƒ±cƒ±larƒ± say
                const normalUsers = users.filter(u => !u.isAdmin);
                
                // Aktif kullanƒ±cƒ±larƒ± say (son 30 g√ºn i√ßinde giri≈ü yapanlar)
                const thirtyDaysAgo = new Date();
                thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                
                const activeUsers = normalUsers.filter(u => {
                    if (!u.lastLogin) return false;
                    try {
                        const lastLogin = new Date(u.lastLogin);
                        return lastLogin > thirtyDaysAgo;
                    } catch (e) {
                        return false;
                    }
                }).length;
                
                document.getElementById('totalUsers').textContent = normalUsers.length;
                document.getElementById('activeUsers').textContent = activeUsers;
                document.getElementById('totalProducts').textContent = products.length;
                document.getElementById('totalMaterials').textContent = materials.length;
                
            } catch (error) {
                console.error('ƒ∞statistikler y√ºklenirken hata:', error);
            }
        }
        
        function updatePreview() {
            const input = document.getElementById('quickRecipeInput').value;
            const previewContent = document.getElementById('previewContent');
            
            if (!input.trim()) {
                previewContent.innerHTML = 'Tarif yazmaya ba≈üladƒ±ƒüƒ±nƒ±zda √∂nizleme burada g√∂r√ºnecek...';
                return;
            }
            
            try {
                const parsedRecipe = parseRecipe(input);
                let previewHTML = '';
                
                if (parsedRecipe.name) {
                    previewHTML += `<div style="margin-bottom: 15px;"><strong>${parsedRecipe.emoji} ${parsedRecipe.name}</strong></div>`;
                }
                
                if (parsedRecipe.materials && parsedRecipe.materials.length > 0) {
                    parsedRecipe.materials.forEach(material => {
                        previewHTML += `
                            <div class="preview-material">
                                <span>${material.emoji} ${material.name}</span>
                                <span>${material.quantity} ${material.unit}</span>
                            </div>
                        `;
                    });
                } else {
                    previewHTML += '<div style="color: var(--muted);">Malzeme bulunamadƒ±. Formatƒ± kontrol edin.</div>';
                }
                
                previewContent.innerHTML = previewHTML;
            } catch (error) {
                previewContent.innerHTML = `<div style="color: var(--danger);">Hata: ${error.message}</div>`;
            }
        }
        
        function parseRecipe(input) {
            const lines = input.split('\n').filter(line => line.trim() !== '');
            
            if (lines.length === 0) {
                throw new Error('Bo≈ü tarif!');
            }
            
            // ƒ∞lk satƒ±r: √ºr√ºn adƒ± ve emoji
            const firstLine = lines[0].trim();
            let productName = firstLine;
            let productEmoji = "üì¶";
            
            // Emoji kontrol√º
            const emojiRegex = /[\u{1F300}-\u{1F9FF}]/u;
            const emojiMatch = firstLine.match(emojiRegex);
            
            if (emojiMatch) {
                const emojiIndex = firstLine.indexOf(emojiMatch[0]);
                productName = firstLine.substring(0, emojiIndex).trim();
                productEmoji = emojiMatch[0];
            }
            
            // Malzemeleri parse et
            const materials = [];
            
            for (let i = 1; i < lines.length; i++) {
                const line = lines[i].trim();
                
                // Madde i≈üaretini kontrol et (- veya ‚Ä¢)
                if (line.startsWith('-') || line.startsWith('‚Ä¢')) {
                    const content = line.substring(1).trim();
                    
                    // Geli≈ümi≈ü parse patternleri
                    const patterns = [
                        /^([^:]+):\s*([\d.]+)\s*([a-zA-Z]+)\s*([üéÄ-üèø])?$/,
                        /^([^:]+)\s+([\d.]+)\s*([a-zA-Z]+)\s*([üéÄ-üèø])?$/
                    ];
                    
                    let match = null;
                    for (const pattern of patterns) {
                        match = content.match(pattern);
                        if (match) break;
                    }
                    
                    if (match) {
                        const name = match[1].trim();
                        const quantity = parseFloat(match[2]);
                        let unit = match[3].toLowerCase();
                        let emoji = match[4] || "üì¶";
                        
                        // Emoji kontrol√º
                        const materialEmojiMatch = content.match(emojiRegex);
                        if (materialEmojiMatch && !match[4]) {
                            emoji = materialEmojiMatch[0];
                        }
                        
                        // Birim standardizasyonu
                        if (unit === 'g' || unit === 'gram') unit = 'gr';
                        if (unit === 'kg' || unit === 'kilo') unit = 'kg';
                        if (unit === 'ml') unit = 'ml';
                        if (unit === 'lt' || unit === 'l' || unit === 'litre') unit = 'lt';
                        if (unit === 'adet' || unit === 'piece') unit = 'adet';
                        if (unit === 'dilim' || unit === 'slice') unit = 'dilim';
                        
                        materials.push({
                            name,
                            quantity,
                            unit,
                            emoji
                        });
                    }
                }
            }
            
            return {
                name: productName,
                emoji: productEmoji,
                materials: materials
            };
        }
        
        function parseAndAddRecipe() {
            const input = document.getElementById('quickRecipeInput').value;
            
            if (!input.trim()) {
                alert('L√ºtfen tarif yazƒ±n!');
                return;
            }
            
            try {
                const parsedRecipe = parseRecipe(input);
                
                if (!parsedRecipe.name) {
                    alert('√úr√ºn adƒ± bulunamadƒ±!');
                    return;
                }
                
                if (parsedRecipe.materials.length === 0) {
                    alert('Hi√ß malzeme bulunamadƒ±! Formatƒ± kontrol edin.');
                    return;
                }
                
                // √úr√ºn√º kaydet
                const products = JSON.parse(localStorage.getItem('maliq_products') || '[]');
                
                // Aynƒ± isimde √ºr√ºn var mƒ± kontrol et
                const existingProductIndex = products.findIndex(p => p.name.toLowerCase() === parsedRecipe.name.toLowerCase());
                if (existingProductIndex !== -1) {
                    if (!confirm(`"${parsedRecipe.name}" isimli √ºr√ºn zaten mevcut! √úzerine yazƒ±lsƒ±n mƒ±?`)) {
                        return;
                    }
                    // Mevcut √ºr√ºn√º kaldƒ±r
                    products.splice(existingProductIndex, 1);
                }
                
                // Yeni √ºr√ºn√º ekle
                products.push({
                    name: parsedRecipe.name,
                    emoji: parsedRecipe.emoji,
                    materials: parsedRecipe.materials,
                    createdAt: new Date().toISOString(),
                    createdBy: 'admin-quick'
                });
                
                localStorage.setItem('maliq_products', JSON.stringify(products));
                
                // Malzemeleri de kaydet (yoksa)
                const materials = JSON.parse(localStorage.getItem('maliq_materials') || '[]');
                parsedRecipe.materials.forEach(material => {
                    const existingMaterial = materials.find(m => m.name.toLowerCase() === material.name.toLowerCase());
                    if (!existingMaterial) {
                        materials.push({
                            name: material.name,
                            emoji: material.emoji,
                            quantity: material.quantity,
                            unit: material.unit,
                            createdAt: new Date().toISOString(),
                            createdBy: 'admin-quick'
                        });
                    }
                });
                localStorage.setItem('maliq_materials', JSON.stringify(materials));
                
                // Formu temizle
                document.getElementById('quickRecipeInput').value = '';
                document.getElementById('previewContent').innerHTML = 'Tarif ba≈üarƒ±yla eklendi! üéâ';
                
                loadAllData();
                
                alert(`"${parsedRecipe.name}" tarifi ba≈üarƒ±yla eklendi! ${parsedRecipe.materials.length} malzeme kaydedildi.`);
                
            } catch (error) {
                alert('Tarif eklenirken hata olu≈ütu: ' + error.message);
                console.error('Parse hatasƒ±:', error);
            }
        }
        
        function loadProducts() {
            try {
                const products = JSON.parse(localStorage.getItem('maliq_products') || '[]');
                const productList = document.getElementById('productList');
                
                productList.innerHTML = '';
                
                if (products.length === 0) {
                    productList.innerHTML = '<div style="text-align: center; color: var(--muted); padding: 20px;">Hen√ºz √ºr√ºn eklenmemi≈ü</div>';
                    return;
                }
                
                // Tarihe g√∂re sƒ±rala (yeniden eskiye)
                const sortedProducts = products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                
                sortedProducts.forEach((product, index) => {
                    const originalIndex = products.findIndex(p => p.name === product.name);
                    const item = document.createElement('div');
                    item.className = 'material-item';
                    item.innerHTML = `
                        <div style="flex: 1;">
                            <span>${product.emoji} ${product.name}</span>
                            <div style="font-size: 11px; color: var(--muted);">
                                ${product.materials.length} malzeme ‚Ä¢ 
                                ${new Date(product.createdAt).toLocaleDateString('tr-TR')}
                            </div>
                        </div>
                        <button class="btn btn-danger" onclick="deleteProduct(${originalIndex})">Sil</button>
                    `;
                    productList.appendChild(item);
                });
            } catch (error) {
                console.error('√úr√ºnler y√ºklenirken hata:', error);
            }
        }
        
        function loadMaterials() {
            try {
                const materials = JSON.parse(localStorage.getItem('maliq_materials') || '[]');
                const materialList = document.getElementById('materialList');
                
                materialList.innerHTML = '';
                
                if (materials.length === 0) {
                    materialList.innerHTML = '<div style="text-align: center; color: var(--muted); padding: 20px;">Hen√ºz malzeme eklenmemi≈ü</div>';
                    return;
                }
                
                // ƒ∞sme g√∂re sƒ±rala
                const sortedMaterials = materials.sort((a, b) => a.name.localeCompare(b.name));
                
                sortedMaterials.forEach((material, index) => {
                    const originalIndex = materials.findIndex(m => m.name === material.name);
                    const item = document.createElement('div');
                    item.className = 'material-item';
                    item.innerHTML = `
                        <div style="flex: 1;">
                            <span>${material.emoji} ${material.name}</span>
                            <div style="font-size: 11px; color: var(--muted);">
                                ${material.quantity} ${material.unit} ‚Ä¢ 
                                ${new Date(material.createdAt).toLocaleDateString('tr-TR')}
                            </div>
                        </div>
                        <button class="btn btn-danger" onclick="deleteMaterial(${originalIndex})">Sil</button>
                    `;
                    materialList.appendChild(item);
                });
            } catch (error) {
                console.error('Malzemeler y√ºklenirken hata:', error);
            }
        }
        
        function loadUsers() {
            try {
                const users = JSON.parse(localStorage.getItem('maliq_users') || '[]');
                const usersList = document.getElementById('usersList');
                
                usersList.innerHTML = '';
                
                // Admin kullanƒ±cƒ±larƒ±nƒ± filtrele (sadece normal kullanƒ±cƒ±larƒ± g√∂ster)
                const normalUsers = users.filter(u => !u.isAdmin);
                
                if (normalUsers.length === 0) {
                    usersList.innerHTML = '<div style="text-align: center; color: var(--muted); padding: 20px;">Hen√ºz kullanƒ±cƒ± kaydƒ± yok</div>';
                    return;
                }
                
                // Tarihe g√∂re sƒ±rala (yeniden eskiye)
                const sortedUsers = normalUsers.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                
                sortedUsers.forEach((user, index) => {
                    const item = document.createElement('div');
                    item.className = 'user-item';
                    
                    const lastLogin = user.lastLogin ? 
                        new Date(user.lastLogin).toLocaleDateString('tr-TR') + ' ' + 
                        new Date(user.lastLogin).toLocaleTimeString('tr-TR') : 
                        'Hi√ß giri≈ü yapmamƒ±≈ü';
                    
                    const provider = user.provider ? ` (${user.provider})` : '';
                    const socialBadge = user.isSocial ? ' üåê' : '';
                    const status = user.isActive ? 'üü¢ Aktif' : 'üî¥ Pasif';
                    
                    item.innerHTML = `
                        <div style="flex: 1;">
                            <strong>${user.name || 'ƒ∞simsiz Kullanƒ±cƒ±'}${socialBadge}</strong>
                            <div style="font-size: 12px; color: var(--muted);">
                                ${user.email}${provider}
                            </div>
                            <div style="font-size: 11px; color: var(--muted);">
                                üìÖ Kayƒ±t: ${new Date(user.createdAt).toLocaleDateString('tr-TR')} ‚Ä¢ ${status}
                            </div>
                        </div>
                        <div style="text-align: right;">
                            <div style="font-size: 12px;">${status}</div>
                            <div style="font-size: 11px; color: var(--muted);">
                                Son giri≈ü:<br>${lastLogin}
                            </div>
                        </div>
                    `;
                    usersList.appendChild(item);
                });
            } catch (error) {
                console.error('Kullanƒ±cƒ±lar y√ºklenirken hata:', error);
            }
        }
        
        function addProduct() {
            const name = document.getElementById('productName').value.trim();
            const emoji = document.getElementById('productEmoji').value.trim();
            
            if (!name) {
                alert('L√ºtfen √ºr√ºn adƒ± girin.');
                return;
            }
            
            if (!emoji) {
                alert('L√ºtfen emoji girin.');
                return;
            }
            
            try {
                const products = JSON.parse(localStorage.getItem('maliq_products') || '[]');
                
                // Aynƒ± isimde √ºr√ºn var mƒ± kontrol et
                const existingProduct = products.find(p => p.name.toLowerCase() === name.toLowerCase());
                if (existingProduct) {
                    alert('Bu isimde bir √ºr√ºn zaten mevcut!');
                    return;
                }
                
                products.push({ 
                    name, 
                    emoji, 
                    materials: [],
                    createdAt: new Date().toISOString(),
                    createdBy: 'admin-manual'
                });
                
                localStorage.setItem('maliq_products', JSON.stringify(products));
                
                // Formu temizle
                document.getElementById('productName').value = '';
                document.getElementById('productEmoji').value = '';
                
                loadAllData();
                
                alert('√úr√ºn ba≈üarƒ±yla eklendi!');
            } catch (error) {
                alert('√úr√ºn eklenirken hata olu≈ütu: ' + error.message);
            }
        }
        
        function addMaterial() {
            const name = document.getElementById('materialName').value.trim();
            const emoji = document.getElementById('materialEmoji').value.trim();
            const quantity = document.getElementById('materialQuantity').value;
            const unit = document.getElementById('materialUnit').value;
            
            if (!name) {
                alert('L√ºtfen malzeme adƒ± girin.');
                return;
            }
            
            if (!emoji) {
                alert('L√ºtfen emoji girin.');
                return;
            }
            
            if (!quantity || quantity <= 0) {
                alert('L√ºtfen ge√ßerli bir miktar girin.');
                return;
            }
            
            try {
                const materials = JSON.parse(localStorage.getItem('maliq_materials') || '[]');
                
                // Aynƒ± isimde malzeme var mƒ± kontrol et
                const existingMaterial = materials.find(m => m.name.toLowerCase() === name.toLowerCase());
                if (existingMaterial) {
                    alert('Bu isimde bir malzeme zaten mevcut!');
                    return;
                }
                
                materials.push({ 
                    name, 
                    emoji, 
                    quantity: parseFloat(quantity), 
                    unit,
                    createdAt: new Date().toISOString(),
                    createdBy: 'admin-manual'
                });
                
                localStorage.setItem('maliq_materials', JSON.stringify(materials));
                
                // Formu temizle
                document.getElementById('materialName').value = '';
                document.getElementById('materialEmoji').value = '';
                document.getElementById('materialQuantity').value = '';
                
                loadAllData();
                
                alert('Malzeme ba≈üarƒ±yla eklendi!');
            } catch (error) {
                alert('Malzeme eklenirken hata olu≈ütu: ' + error.message);
            }
        }
        
        function deleteProduct(index) {
            if (!confirm('Bu √ºr√ºn√º silmek istediƒüinizden emin misiniz?\n\nBu i≈ülem geri alƒ±namaz!')) {
                return;
            }
            
            try {
                const products = JSON.parse(localStorage.getItem('maliq_products') || '[]');
                
                if (index < 0 || index >= products.length) {
                    alert('Ge√ßersiz √ºr√ºn indexi!');
                    return;
                }
                
                const productName = products[index].name;
                products.splice(index, 1);
                localStorage.setItem('maliq_products', JSON.stringify(products));
                
                loadAllData();
                
                alert(`"${productName}" √ºr√ºn√º ba≈üarƒ±yla silindi!`);
            } catch (error) {
                alert('√úr√ºn silinirken hata olu≈ütu: ' + error.message);
            }
        }
        
        function deleteMaterial(index) {
            if (!confirm('Bu malzemeyi silmek istediƒüinizden emin misiniz?\n\nBu i≈ülem geri alƒ±namaz!')) {
                return;
            }
            
            try {
                const materials = JSON.parse(localStorage.getItem('maliq_materials') || '[]');
                
                if (index < 0 || index >= materials.length) {
                    alert('Ge√ßersiz malzeme indexi!');
                    return;
                }
                
                const materialName = materials[index].name;
                materials.splice(index, 1);
                localStorage.setItem('maliq_materials', JSON.stringify(materials));
                
                loadAllData();
                
                alert(`"${materialName}" malzemesi ba≈üarƒ±yla silindi!`);
            } catch (error) {
                alert('Malzeme silinirken hata olu≈ütu: ' + error.message);
            }
        }
    </script>
</body>
</html>
